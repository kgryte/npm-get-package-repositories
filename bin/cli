#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var pkginfo = require( 'pkginfo' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var opts = require( './opts.json' );
var urls = require( './../lib' );


// VARIABLES //

var args;
var pkg;


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE INFO //

pkg = pkginfo.read( require.main );
process.title = pkg.package.name;


// PACKAGE UPDATES //

notifier( { 'pkg': pkg.package } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

function onClose() {
	process.exit( 1 );
}

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.package.version );
	return;
}


// OPTIONS //

opts = {};

opts.packages = args._;
if ( args.hasOwnProperty( 'port' ) ) {
	opts.port = args.port;
}
if ( args.registry ) {
	opts.registry = args.registry;
}
if ( args.protocol ) {
	opts.protocol = args.protocol;
}
if (
	args.format &&
	args.format !== 'csv' &&
	args.format !== 'json'
) {
	throw new Error( 'invalid option. Format option must be either `csv` or `json`. Option: `' + args.format + '`.' );
}


// GET URLS //

urls( opts, clbk );

/**
* FUNCTION: clbk( error, results )
*	Callback invoked upon receiving results.
*
* @private
* @param {Error|Null} error - error object or null
* @param {Object} results - results
* @returns {Void}
*/
function clbk( error, results ) {
	var writer;
	if ( error ) {
		throw error;
	}
	if ( args.format === 'json' ) {
		writer = ndjson;
	} else {
		writer = csv;
	}
	writer( process.stdout, results.data );
	writer( process.stderr, results.failures );
	process.exit( 0 );
} // end FUNCTION clbk()

/**
* FUNCTION: csv( stream, data )
*	Writes newline-delimited column-separated values to a writable stream.
*
* @private
* @param {Stream} stream - writable stream
* @param {Object} data - data to write
* @returns {Void}
*/
function csv( stream, data ) {
	var keys;
	var out;
	var i;

	keys = Object.keys( data );
	for ( i = 0; i < keys.length; i++ ) {
		out = keys[ i ] + ',' + data[ keys[i] ] + '\n';
		stream.write( out, 'utf8' );
	}
} // end FUNCTION csv()

/**
* FUNCTION: ndjson( stream, data )
*	Writes newline-delimited JSON to a writable stream.
*
* @private
* @param {Stream} stream - writable stream
* @param {Object} data - data to write
* @returns {Void}
*/
function ndjson( stream, data ) {
	var keys;
	var out;
	var i;

	keys = Object.keys( data );
	for ( i = 0; i < keys.length; i++ ) {
		out = {};
		out[ keys[i] ] = data[ keys[i] ];
		out = JSON.stringify( out ) + '\n';
		stream.write( out, 'utf8' );
	}
} // end FUNCTION ndjson()
